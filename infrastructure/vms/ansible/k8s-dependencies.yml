- name: "Configure k8s"
  hosts: k8s
  become: true
  tasks:
    - name: "Update host controller"
      apt:
        update_cache: yes
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl

    - name: "Get gc key"
      shell: "curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg"

    - name: "Add k8s repo"
      lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        line: "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
        state: present
        create: yes

    - name: "Install goodies"
      apt:
        update_cache: yes
        pkg:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: "hold bins"
      shell: "apt-mark hold kubelet kubeadm kubectl"

    - name: "Add cluster to hostfiles"
      lineinfile:
        path: /etc/hosts
        line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{ item }}"
        state: present
        create: yes
      with_items: "{{ groups['k8s'] }}"

    - name: "Set hostname"
      hostname:
        name: "{{ inventory_hostname }}"

    - name: "Enable kubelet"
      service:
        name: kubelet
        enabled: yes

    - name: "Disable swap"
      shell: "swapoff -a"

    - name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: "Update modprobes"
      shell: "modprobe br_netfilter && modprobe overlay"

    - name: "Clear default config"
      file:
        path: /etc/containerd/config.toml
        state: absent

    - name: "Create containerd config"
      copy:
        src: containerd.config.toml
        dest: /etc/containerd/config.toml
        mode: 0644
        owner: root

    - name: "Add containerd modules"
      blockinfile:
        path: /etc/modules-load.d/containerd.conf
        block: |
          overlay
          br_netfilter
        create: yes

    - name: "Update sysctl"
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        state: present
        reload: yes
      with_items:
        - { key: "net.bridge.bridge-nf-call-iptables", value: "1" }
        - { key: "net.ipv4.ip_forward", value: "1" }

    - name: "Restart and enable containerd"
      service:
        name: containerd
        state: restarted
        enabled: yes
#TODO: Come back and configure hosts dynamically for terraform to consume ansible tasks
