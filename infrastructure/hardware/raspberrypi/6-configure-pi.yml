---
- import_playbook: ../vyos/configure-dhcp.yml
- name: "Configure Pi controller"
  hosts: controllers
  become: true
  tasks:
    - name: "Update Pi controller"
      apt:
        update_cache: yes
        pkg:
          - build-essential
          - libffi-dev
          - python3-dev
          - libssl-dev
          - nfs-kernel-server
          - screen
          - vim

    - name: "Get docker install script"
      get_url:
        url: https://get.docker.com
        dest: /tmp/get-docker.sh
        mode: 0755
        force: true

    - name: "Install docker"
      shell: /tmp/get-docker.sh
      args:
        creates: /usr/bin/docker

    - name: "Get docker-compose"
      get_url:
        url: https://raw.githubusercontent.com/linuxserver/docker-docker-compose/v2/run.sh
        dest: /usr/local/bin/docker-compose
        mode: 0755

    - name: "Add pi to group"
      user:
        name: pi
        groups: docker
        append: yes

    - name: "Add tokugero to group"
      user:
        name: tokugero
        groups: docker
        append: yes

    - name: "Set mount path"
      file:
        path: "{{ persistent_path }}"
        state: directory
        owner: pi
        group: pi
        mode: 0755

    - name: "Update fstab with external storage"
      become: yes
      mount:
        path: "{{ persistent_path }}"
        src: /dev/sda1
        fstype: ext4
        opts: defaults
        state: mounted

    - name: "Get cloud_init files"
      become: yes
      get_url:
        url: "{{ item['url'] }}"
        dest: "/opt/services/nfs/images/{{ item['name'] }}.qcow2"
        mode: 0755
        owner: pi
        group: pi
      with_items: "{{ amis }}"

    - name: "Create NFS mount"
      file:
        path: "{{ persistent_path }}/nfs"
        state: directory
        owner: pi
        group: pi
        mode: 0755

    - name: "Create NFS export"
      lineinfile:
        path: /etc/exports
        line: "{{ persistent_path }}/nfs *(rw,sync,no_subtree_check,no_root_squash)"
        state: present
        create: yes

    - name: "Restart NFS"
      service:
        name: nfs-kernel-server
        state: restarted

    - name: "Apply NFS Mounts"
      shell: exportfs -a
